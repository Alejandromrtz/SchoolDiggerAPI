{"mappings":"ACGA,eAAe,EAAa,CAAQ,EAChC,GAAI,CACA,IAAM,EAAM,4DAAe,wEAAwD,CAC7E,EAAW,MAAM,MAAM,GACvB,EAAO,MAAM,EAAS,IAA5B,GACA,QAAQ,GAAA,CAAI,GACZ,AAMR,SAAwB,CAAO,EAC3B,IAAM,EAAkB,SAAS,cAAA,CAAe,mBAGhD,IAAK,IAAM,KAFX,EAAgB,SAAA,CAAY,GAEP,GAAS,CAC1B,IAAM,EAAM,SAAS,aAAA,CAAc,KACnC,CAAA,EAAI,SAAA,CAAY,CAAC;gBACT,EAAE,EAAO,UAAA,CAAW;gBACpB,EAAE,EAAO,IAAA,CAAK,EAAE,EAAE,EAAO,KAAA,CAAM,CAAC,EAAE,EAAO,GAAA,CAAI;gBAC7C,EAAE,EAAO,WAAA,CAAY;gBACrB,EAAE,EAAO,QAAA,CAAS,GAAG,EAAE,EAAO,SAAA,CAAU;gBACxC,EAAE,EAAO,IAAA,CAAK,QAAQ,EAAE,EAAO,MAAA,CAAO,EAAE,EAAE,EAAO,SAAA,CAAU;QACnE,CAAC,CACD,EAAgB,WAAA,CAAY,EAChC,CACJ,EArBuB,EAAK,aAApB,CACJ,CAAE,MAAO,EAAO,CACZ,QAAQ,GAAA,CAAI,qBAAsB,EACtC,CACJ,CAmBA,SAAS,gBAAA,CAAiB,mBAAoB,KAC1C,IAAM,EAAe,SAAS,cAAA,CAAe,gBAC7C,EAAa,gBAAA,CAAiB,QAAS,KACnC,IAAM,EAAgB,SAAS,cAAA,CAAe,iBACxC,EAAW,EAAc,KAA/B,CACA,EAAa,EACjB,EACJ,E,4D","sources":["<anon>","script.js"],"sourcesContent":["var $c1ce9d969bfa6909$exports = {};\nconst $c1ce9d969bfa6909$var$apiKey = \"4e7338563e078d735216af6d5970d6a9\";\nconst $c1ce9d969bfa6909$var$apiUrl = \"https://api.schooldigger.com/v2.0/autocomplete/schools\";\nasync function $c1ce9d969bfa6909$var$fetchSchools(location) {\n    try {\n        const url = `${$c1ce9d969bfa6909$var$apiUrl}?q=${location}&returnCount=5&appID=6e029654&appKey=${$c1ce9d969bfa6909$var$apiKey}`;\n        const response = await fetch(url);\n        const data = await response.json();\n        console.log(data);\n        $c1ce9d969bfa6909$var$displaySchools(data.schoolMatches);\n    } catch (error) {\n        console.log(\"There was an error\", error);\n    }\n}\nfunction $c1ce9d969bfa6909$var$displaySchools(schools) {\n    const schoolTableBody = document.getElementById(\"schoolTableBody\");\n    schoolTableBody.innerHTML = \"\"; // Clear previous results\n    for (const school of schools){\n        const row = document.createElement(\"tr\");\n        row.innerHTML = `\n            <td>${school.schoolName}</td>\n            <td>${school.city}, ${school.state} ${school.zip}</td>\n            <td>${school.schoolLevel}</td>\n            <td>${school.lowGrade} - ${school.highGrade}</td>\n            <td>${school.rank} out of ${school.rankOf}, ${school.rankStars} stars</td>\n        `;\n        schoolTableBody.appendChild(row);\n    }\n}\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const searchButton = document.getElementById(\"searchButton\");\n    searchButton.addEventListener(\"click\", ()=>{\n        const locationInput = document.getElementById(\"locationInput\");\n        const location = locationInput.value;\n        $c1ce9d969bfa6909$var$fetchSchools(location);\n    });\n});\n\n\n//# sourceMappingURL=index.84421e90.js.map\n","const apiKey = process.env.SCHOOL_API_KEY;\nconst apiUrl = \"https://api.schooldigger.com/v2.0/autocomplete/schools\";\n\nasync function fetchSchools(location) {\n    try {\n        const url = `${apiUrl}?q=${location}&returnCount=5&appID=6e029654&appKey=${apiKey}`;\n        const response = await fetch(url);\n        const data = await response.json();\n        console.log(data);\n        displaySchools(data.schoolMatches);\n    } catch (error) {\n        console.log('There was an error', error);\n    }\n}\n\nfunction displaySchools(schools) {\n    const schoolTableBody = document.getElementById('schoolTableBody');\n    schoolTableBody.innerHTML = ''; // Clear previous results\n\n    for (const school of schools) {\n        const row = document.createElement('tr');\n        row.innerHTML = `\n            <td>${school.schoolName}</td>\n            <td>${school.city}, ${school.state} ${school.zip}</td>\n            <td>${school.schoolLevel}</td>\n            <td>${school.lowGrade} - ${school.highGrade}</td>\n            <td>${school.rank} out of ${school.rankOf}, ${school.rankStars} stars</td>\n        `;\n        schoolTableBody.appendChild(row);\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const searchButton = document.getElementById('searchButton');\n    searchButton.addEventListener('click', () => {\n        const locationInput = document.getElementById('locationInput');\n        const location = locationInput.value;\n        fetchSchools(location);\n    });\n});\n"],"names":["$c1ce9d969bfa6909$var$fetchSchools","location","url","response","fetch","data","json","console","log","$c1ce9d969bfa6909$var$displaySchools","schools","schoolTableBody","document","getElementById","school","innerHTML","row","createElement","schoolName","city","state","zip","schoolLevel","lowGrade","highGrade","rank","rankOf","rankStars","appendChild","schoolMatches","error","addEventListener","searchButton","locationInput","value"],"version":3,"file":"index.84421e90.js.map"}